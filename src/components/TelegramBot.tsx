import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

interface TelegramBotProps {
  botToken: string;
  onUpdate?: (data: any) => void;
}

interface BotMessage {
  chat_id: number;
  text: string;
  reply_markup?: {
    inline_keyboard: Array<Array<{
      text: string;
      callback_data?: string;
      url?: string;
      web_app?: { url: string };
    }>>;
  };
  parse_mode?: 'HTML' | 'Markdown';
}

const TelegramBot: React.FC<TelegramBotProps> = ({ botToken, onUpdate }) => {
  const [botStatus, setBotStatus] = useState<'connecting' | 'connected' | 'error'>('connecting');
  const [botInfo, setBotInfo] = useState<any>(null);
  const [recentMessages, setRecentMessages] = useState<any[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);

  const API_BASE = `https://api.telegram.org/bot${botToken}`;

  useEffect(() => {
    initBot();
  }, [botToken]);

  const initBot = async () => {
    try {
      setBotStatus('connecting');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const response = await fetch(`${API_BASE}/getMe`);
      const data = await response.json();
      
      if (data.ok) {
        setBotInfo(data.result);
        setBotStatus('connected');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
        await setupBotCommands();
        await startPolling();
      } else {
        setBotStatus('error');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', data);
      }
    } catch (error) {
      setBotStatus('error');
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  };

  const setupBotCommands = async () => {
    const commands = [
      { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω' },
      { command: 'catalog', description: 'üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤' },
      { command: 'admin', description: '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' },
      { command: 'orders', description: 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã' },
      { command: 'support', description: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' }
    ];

    try {
      await fetch(`${API_BASE}/setMyCommands`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ commands })
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
    }
  };

  const startPolling = async () => {
    let offset = 0;
    
    const poll = async () => {
      try {
        const response = await fetch(`${API_BASE}/getUpdates?offset=${offset}&timeout=30`);
        const data = await response.json();
        
        if (data.ok && data.result.length > 0) {
          for (const update of data.result) {
            await handleUpdate(update);
            offset = update.update_id + 1;
          }
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        setTimeout(poll, 1000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞:', error);
        setTimeout(poll, 5000);
      }
    };

    poll();
  };

  const handleUpdate = async (update: any) => {
    setRecentMessages(prev => [update, ...prev.slice(0, 9)]);
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    
    onUpdate?.(update);
  };

  const handleMessage = async (message: any) => {
    const chatId = message.chat.id;
    const text = message.text;
    const userId = message.from.id;
    const userName = message.from.first_name || message.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    if (text?.startsWith('/start')) {
      await sendWelcomeMessage(chatId, userName);
    } else if (text?.startsWith('/admin')) {
      await sendAdminPanel(chatId, userId);
    } else if (text?.startsWith('/catalog')) {
      await sendCatalog(chatId);
    } else if (text?.startsWith('/orders')) {
      await sendUserOrders(chatId, userId);
    } else if (text?.startsWith('/support')) {
      await sendSupport(chatId);
    } else {
      await sendUnknownCommand(chatId);
    }
  };

  const handleCallbackQuery = async (callbackQuery: any) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await fetch(`${API_BASE}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQuery.id,
        text: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...',
        show_alert: false
      })
    });

    if (data === 'open_admin') {
      await sendAdminWebApp(chatId);
    } else if (data === 'open_store') {
      await sendStoreWebApp(chatId);
    } else if (data.startsWith('add_to_cart_')) {
      const productId = data.replace('add_to_cart_', '');
      await handleAddToCart(chatId, userId, productId);
    }
  };

  const sendMessage = async (message: BotMessage) => {
    try {
      setIsProcessing(true);
      const response = await fetch(`${API_BASE}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message)
      });
      
      const data = await response.json();
      if (!data.ok) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
      }
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const sendWelcomeMessage = async (chatId: number, userName: string) => {
    const message: BotMessage = {
      chat_id: chatId,
      text: `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>YP BRAND</b>, ${userName}!

–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.

üéÅ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à iPhone 15 Pro –¥–æ 30 –∏—é–ª—è
‚Ä¢ –ö—ç—à–±—ç–∫ YP-–º–æ–Ω–µ—Ç–∞–º–∏ 1.2% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 3000‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app: { url: window.location.origin } },
          ],
          [
            { text: 'üì¶ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'open_store' },
            { text: 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaway_info' }
          ],
          [
            { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/ypbrand_support' }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const sendAdminPanel = async (chatId: number, userId: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID)
    const adminIds = [123456789, 987654321]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    if (!adminIds.includes(userId)) {
      await sendMessage({
        chat_id: chatId,
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
      });
      return;
    }

    const message: BotMessage = {
      chat_id: chatId,
      text: `üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å YP BRAND</b>

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º –ø—Ä—è–º–æ –∏–∑ Telegram!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ –∞–∫—Ü–∏–π
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞

–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', web_app: { url: `${window.location.origin}?admin=true` } }
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
            { text: 'üì¶ –¢–æ–≤–∞—Ä—ã', callback_data: 'admin_products' }
          ],
          [
            { text: 'üõí –ó–∞–∫–∞–∑—ã', callback_data: 'admin_orders' },
            { text: 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏', callback_data: 'admin_giveaways' }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const sendCatalog = async (chatId: number) => {
    const message: BotMessage = {
      chat_id: chatId,
      text: `üì¶ <b>–ö–∞—Ç–∞–ª–æ–≥ YP BRAND</b>

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>

üéß <b>–ê—É–¥–∏–æ –∏ –∑–≤—É–∫</b>
‚Ä¢ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ –æ—Ç 3999‚ÇΩ
‚Ä¢ –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç 2499‚ÇΩ

üîå <b>–ö–∞–±–µ–ª–∏ –∏ –∑–∞—Ä—è–¥–∫–∏</b>
‚Ä¢ USB-C –∫–∞–±–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –æ—Ç 1299‚ÇΩ
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞—Ä—è–¥–∫–∏ 65W –æ—Ç 1899‚ÇΩ

üîã <b>Power Bank</b>
‚Ä¢ 10000mAh –æ—Ç 2499‚ÇΩ
‚Ä¢ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –æ—Ç 3299‚ÇΩ

–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: `${window.location.origin}?tab=catalog` } }
          ],
          [
            { text: 'üéß –ê—É–¥–∏–æ', callback_data: 'category_audio' },
            { text: 'üîå –ö–∞–±–µ–ª–∏', callback_data: 'category_cables' }
          ],
          [
            { text: 'üîã Power Bank', callback_data: 'category_powerbank' },
            { text: 'üì± –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data: 'category_accessories' }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const sendUserOrders = async (chatId: number, userId: number) => {
    const message: BotMessage = {
      chat_id: chatId,
      text: `üõí <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>

‚Ä¢ –ó–∞–∫–∞–∑ #1234 - 3299‚ÇΩ (–í –¥–æ—Å—Ç–∞–≤–∫–µ)
‚Ä¢ –ó–∞–∫–∞–∑ #1223 - 1899‚ÇΩ (–í—ã–ø–æ–ª–Ω–µ–Ω)

üí∞ <b>YP-–º–æ–Ω–µ—Ç—ã:</b> 156 ‚ÇΩ
üéØ <b>–ö—ç—à–±—ç–∫:</b> 1.2% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã', web_app: { url: `${window.location.origin}?tab=profile` } }
          ],
          [
            { text: 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', web_app: { url: `${window.location.origin}?tab=cart` } },
            { text: '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', web_app: { url: `${window.location.origin}?tab=favorites` } }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const sendSupport = async (chatId: number) => {
    const message: BotMessage = {
      chat_id: chatId,
      text: `üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ YP BRAND</b>

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!

üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 9:00 - 21:00 (–ú–°–ö)
üìû <b>–û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ:</b> 5-15 –º–∏–Ω—É—Ç

‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ 1-3 –¥–Ω—è –ø–æ –†–æ—Å—Å–∏–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, –Ω–∞–ª–∏—á–Ω—ã–º–∏, YP-–º–æ–Ω–µ—Ç–∞–º–∏
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url: 'https://t.me/ypbrand_support' }
          ],
          [
            { text: 'üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫', callback_data: 'request_call' },
            { text: '‚ùì FAQ', callback_data: 'show_faq' }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const sendUnknownCommand = async (chatId: number) => {
    const message: BotMessage = {
      chat_id: chatId,
      text: `ü§ñ –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤  
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω:`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app: { url: window.location.origin } }
          ]
        ]
      }
    };

    await sendMessage(message);
  };

  const handleAddToCart = async (chatId: number, userId: number, productId: string) => {
    await sendMessage({
      chat_id: chatId,
      text: `‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:`,
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', web_app: { url: `${window.location.origin}?tab=cart` } }
          ]
        ]
      }
    });
  };

  const sendAdminWebApp = async (chatId: number) => {
    await sendMessage({
      chat_id: chatId,
      text: '–û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', web_app: { url: `${window.location.origin}?admin=true` } }
          ]
        ]
      }
    });
  };

  const sendStoreWebApp = async (chatId: number) => {
    await sendMessage({
      chat_id: chatId,
      text: '–û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω...',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üõç –ú–∞–≥–∞–∑–∏–Ω', web_app: { url: window.location.origin } }
          ]
        ]
      }
    });
  };

  return (
    <Card className="bg-yp-white/5 border-yp-gray/20">
      <CardHeader>
        <CardTitle className="text-yp-orange flex items-center gap-2">
          <Icon name="Bot" size={20} />
          Telegram Bot
          <Badge 
            className={
              botStatus === 'connected' ? 'bg-green-500/20 text-green-400 border-green-500/30' :
              botStatus === 'connecting' ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30' :
              'bg-red-500/20 text-red-400 border-red-500/30'
            }
          >
            {botStatus === 'connected' ? 'üü¢ –û–Ω–ª–∞–π–Ω' :
             botStatus === 'connecting' ? 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ' : 'üî¥ –û—à–∏–±–∫–∞'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {botInfo && (
          <div className="bg-yp-gray/10 p-3 rounded-lg">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-yp-orange/20 rounded-full flex items-center justify-center">
                <Icon name="Bot" size={20} className="text-yp-orange" />
              </div>
              <div>
                <h3 className="font-medium text-yp-white">@{botInfo.username}</h3>
                <p className="text-sm text-yp-gray">{botInfo.first_name}</p>
              </div>
            </div>
          </div>
        )}

        <div className="space-y-2">
          <h4 className="text-sm font-medium text-yp-gray">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h4>
          <div className="grid grid-cols-2 gap-2">
            <Button 
              size="sm" 
              variant="outline" 
              className="border-yp-orange/30 text-yp-orange hover:bg-yp-orange/10"
              disabled={botStatus !== 'connected' || isProcessing}
            >
              <Icon name="Send" size={14} className="mr-1" />
              –†–∞—Å—Å—ã–ª–∫–∞
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              className="border-yp-gray/30 text-yp-gray hover:bg-yp-gray/10"
              disabled={botStatus !== 'connected'}
            >
              <Icon name="BarChart3" size={14} className="mr-1" />
              –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            </Button>
          </div>
        </div>

        {recentMessages.length > 0 && (
          <div className="space-y-2">
            <h4 className="text-sm font-medium text-yp-gray">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</h4>
            <div className="space-y-1 max-h-32 overflow-y-auto">
              {recentMessages.slice(0, 3).map((msg, idx) => (
                <div key={idx} className="text-xs bg-yp-gray/5 p-2 rounded text-yp-gray">
                  {msg.message?.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: {msg.message?.text || '–î–µ–π—Å—Ç–≤–∏–µ'}
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="text-xs text-yp-gray">
          <p>Token: {botToken.slice(0, 20)}...</p>
          <p>API: api.telegram.org</p>
        </div>
      </CardContent>
    </Card>
  );
};

export default TelegramBot;