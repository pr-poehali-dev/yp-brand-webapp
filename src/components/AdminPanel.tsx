import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';
import TelegramAdmin from './TelegramAdmin';
import TelegramBot from './TelegramBot';

interface AdminPanelProps {
  onClose: () => void;
  onUpdateStore: (updates: any) => void;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ onClose, onUpdateStore }) => {
  const [activeSection, setActiveSection] = useState('telegram');
  const [newProduct, setNewProduct] = useState({
    name: '',
    price: '',
    oldPrice: '',
    description: '',
    category: '',
    colors: '',
    image: ''
  });

  const [storeSettings, setStoreSettings] = useState({
    storeName: 'YP BRAND',
    logoText: 'YP BRAND',
    description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    telegramBot: '@ypbrand_bot',
    whatsappNumber: '+7 900 123-45-67'
  });

  const [giveaway, setGiveaway] = useState({
    title: '',
    description: '',
    prize: '',
    endDate: '',
    isActive: false
  });

  const handleAddProduct = () => {
    if (!newProduct.name || !newProduct.price) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞!');
      return;
    }

    const product = {
      id: Date.now(),
      name: newProduct.name,
      price: parseInt(newProduct.price),
      oldPrice: newProduct.oldPrice ? parseInt(newProduct.oldPrice) : null,
      description: newProduct.description,
      category: newProduct.category,
      colors: newProduct.colors.split(',').map(c => c.trim()),
      image: newProduct.image || '/img/placeholder.svg',
      rating: 4.5 + Math.random() * 0.5
    };

    onUpdateStore({ type: 'ADD_PRODUCT', product });
    
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    setNewProduct({
      name: '', price: '', oldPrice: '', description: '', 
      category: '', colors: '', image: ''
    });

    alert('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram-–±–æ—Ç.');
  };

  const handleUpdateStore = () => {
    onUpdateStore({ type: 'UPDATE_SETTINGS', settings: storeSettings });
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  };

  const handleStartGiveaway = () => {
    if (!giveaway.title || !giveaway.prize) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!');
      return;
    }

    onUpdateStore({ 
      type: 'START_GIVEAWAY', 
      giveaway: { ...giveaway, isActive: true, id: Date.now() }
    });
    
    alert('–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
  };

  const adminSections = [
    { id: 'telegram', icon: 'Bot', label: 'Telegram' },
    { id: 'products', icon: 'Package', label: '–¢–æ–≤–∞—Ä—ã' },
    { id: 'store', icon: 'Store', label: '–ú–∞–≥–∞–∑–∏–Ω' },
    { id: 'giveaways', icon: 'Gift', label: '–†–æ–∑—ã–≥—Ä—ã—à–∏' },
    { id: 'orders', icon: 'ShoppingCart', label: '–ó–∞–∫–∞–∑—ã' },
    { id: 'analytics', icon: 'BarChart3', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' }
  ];

  return (
    <div className="fixed inset-0 bg-yp-black/95 backdrop-blur-sm z-50 overflow-y-auto">
      <div className="min-h-screen p-4">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold text-yp-orange">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
              <p className="text-yp-gray">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º YP BRAND</p>
            </div>
            <Button
              onClick={onClose}
              variant="ghost"
              className="text-yp-gray hover:text-yp-white"
            >
              <Icon name="X" size={24} />
            </Button>
          </div>

          {/* Navigation */}
          <div className="flex gap-2 mb-6 overflow-x-auto">
            {adminSections.map((section) => (
              <Button
                key={section.id}
                variant={activeSection === section.id ? "default" : "ghost"}
                onClick={() => setActiveSection(section.id)}
                className={`flex items-center gap-2 whitespace-nowrap ${
                  activeSection === section.id 
                    ? 'bg-yp-orange text-white' 
                    : 'text-yp-gray hover:text-yp-white'
                }`}
              >
                <Icon name={section.icon as any} size={16} />
                {section.label}
              </Button>
            ))}
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ */}
            {activeSection === 'products' && (
              <Card className="bg-yp-white/5 border-yp-gray/20">
                <CardHeader>
                  <CardTitle className="text-yp-orange flex items-center gap-2">
                    <Icon name="Package" size={20} />
                    –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-yp-white">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</Label>
                      <Input
                        value={newProduct.name}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, name: e.target.value }))}
                        placeholder="USB-C –∫–∞–±–µ–ª—å –ø—Ä–µ–º–∏—É–º"
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                      <Input
                        value={newProduct.category}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, category: e.target.value }))}
                        placeholder="–ö–∞–±–µ–ª–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">–¶–µ–Ω–∞ (‚ÇΩ)</Label>
                      <Input
                        type="number"
                        value={newProduct.price}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, price: e.target.value }))}
                        placeholder="1299"
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</Label>
                      <Input
                        type="number"
                        value={newProduct.oldPrice}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, oldPrice: e.target.value }))}
                        placeholder="1599"
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                  </div>

                  <div>
                    <Label className="text-yp-white">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={newProduct.description}
                      onChange={(e) => setNewProduct(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π USB-C –∫–∞–±–µ–ª—å..."
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <div>
                    <Label className="text-yp-white">–¶–≤–µ—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</Label>
                    <Input
                      value={newProduct.colors}
                      onChange={(e) => setNewProduct(prev => ({ ...prev, colors: e.target.value }))}
                      placeholder="–ß—ë—Ä–Ω—ã–π, –ë–µ–ª—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π"
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <div>
                    <Label className="text-yp-white">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                    <Input
                      value={newProduct.image}
                      onChange={(e) => setNewProduct(prev => ({ ...prev, image: e.target.value }))}
                      placeholder="/img/product.jpg"
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <Button 
                    onClick={handleAddProduct}
                    className="w-full bg-yp-orange hover:bg-yp-orange/90 text-white"
                  >
                    <Icon name="Plus" size={16} className="mr-2" />
                    –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç
                  </Button>

                  <div className="bg-blue-500/10 p-3 rounded-lg">
                    <p className="text-blue-400 text-sm">
                      üí° –¢–æ–≤–∞—Ä—ã —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç: {storeSettings.telegramBot}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ */}
            {activeSection === 'store' && (
              <Card className="bg-yp-white/5 border-yp-gray/20">
                <CardHeader>
                  <CardTitle className="text-yp-orange flex items-center gap-2">
                    <Icon name="Store" size={20} />
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-yp-white">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</Label>
                      <Input
                        value={storeSettings.storeName}
                        onChange={(e) => setStoreSettings(prev => ({ ...prev, storeName: e.target.value }))}
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">–¢–µ–∫—Å—Ç –ª–æ–≥–æ—Ç–∏–ø–∞</Label>
                      <Input
                        value={storeSettings.logoText}
                        onChange={(e) => setStoreSettings(prev => ({ ...prev, logoText: e.target.value }))}
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                  </div>

                  <div>
                    <Label className="text-yp-white">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Input
                      value={storeSettings.description}
                      onChange={(e) => setStoreSettings(prev => ({ ...prev, description: e.target.value }))}
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <Separator className="bg-yp-gray/20" />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-yp-white">Telegram-–±–æ—Ç</Label>
                      <Input
                        value={storeSettings.telegramBot}
                        onChange={(e) => setStoreSettings(prev => ({ ...prev, telegramBot: e.target.value }))}
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">WhatsApp –Ω–æ–º–µ—Ä</Label>
                      <Input
                        value={storeSettings.whatsappNumber}
                        onChange={(e) => setStoreSettings(prev => ({ ...prev, whatsappNumber: e.target.value }))}
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                  </div>

                  <Button 
                    onClick={handleUpdateStore}
                    className="w-full bg-yp-orange hover:bg-yp-orange/90 text-white"
                  >
                    <Icon name="Save" size={16} className="mr-2" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </Button>
                </CardContent>
              </Card>
            )}

            {/* Telegram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
            {activeSection === 'telegram' && (
              <div className="space-y-4">
                <TelegramAdmin onClose={() => setActiveSection('products')} />
                <TelegramBot 
                  botToken="7846630115:AAH2uGX6Hdv-ImcEMiM6UvdxRWynHCcQnjA"
                  onUpdate={(data) => console.log('Bot update:', data)}
                />
              </div>
            )}

            {/* –†–æ–∑—ã–≥—Ä—ã—à–∏ */}
            {activeSection === 'giveaways' && (
              <Card className="bg-yp-white/5 border-yp-gray/20">
                <CardHeader>
                  <CardTitle className="text-yp-orange flex items-center gap-2">
                    <Icon name="Gift" size={20} />
                    –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label className="text-yp-white">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</Label>
                    <Input
                      value={giveaway.title}
                      onChange={(e) => setGiveaway(prev => ({ ...prev, title: e.target.value }))}
                      placeholder="–†–æ–∑—ã–≥—Ä—ã—à iPhone 15 Pro"
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <div>
                    <Label className="text-yp-white">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={giveaway.description}
                      onChange={(e) => setGiveaway(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã..."
                      className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-yp-white">–ü—Ä–∏–∑</Label>
                      <Input
                        value={giveaway.prize}
                        onChange={(e) => setGiveaway(prev => ({ ...prev, prize: e.target.value }))}
                        placeholder="iPhone 15 Pro 256GB"
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                    <div>
                      <Label className="text-yp-white">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</Label>
                      <Input
                        type="date"
                        value={giveaway.endDate}
                        onChange={(e) => setGiveaway(prev => ({ ...prev, endDate: e.target.value }))}
                        className="bg-yp-gray/20 border-yp-gray/30 text-yp-white"
                      />
                    </div>
                  </div>

                  <Button 
                    onClick={handleStartGiveaway}
                    className="w-full bg-yp-orange hover:bg-yp-orange/90 text-white"
                  >
                    <Icon name="Zap" size={16} className="mr-2" />
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
                  </Button>
                </CardContent>
              </Card>
            )}

            {/* –ó–∞–∫–∞–∑—ã */}
            {activeSection === 'orders' && (
              <Card className="bg-yp-white/5 border-yp-gray/20">
                <CardHeader>
                  <CardTitle className="text-yp-orange flex items-center gap-2">
                    <Icon name="ShoppingCart" size={20} />
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-8">
                    <Icon name="MessageSquare" size={48} className="text-yp-gray mx-auto mb-3" />
                    <h3 className="text-yp-white font-medium mb-2">–ó–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã</h3>
                    <p className="text-yp-gray text-sm mb-4">
                      –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ Telegram-–±–æ—Ç –∏ WhatsApp
                    </p>
                    <div className="flex gap-2 justify-center">
                      <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30">
                        Telegram: {storeSettings.telegramBot}
                      </Badge>
                      <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                        WhatsApp: {storeSettings.whatsappNumber}
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
            {activeSection === 'analytics' && (
              <Card className="bg-yp-white/5 border-yp-gray/20">
                <CardHeader>
                  <CardTitle className="text-yp-orange flex items-center gap-2">
                    <Icon name="BarChart3" size={20} />
                    –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-yp-orange/10 p-4 rounded-lg text-center">
                      <Icon name="Users" size={24} className="text-yp-orange mx-auto mb-2" />
                      <div className="text-2xl font-bold text-yp-orange">1,247</div>
                      <div className="text-yp-gray text-sm">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div className="bg-blue-500/10 p-4 rounded-lg text-center">
                      <Icon name="ShoppingBag" size={24} className="text-blue-400 mx-auto mb-2" />
                      <div className="text-2xl font-bold text-blue-400">89</div>
                      <div className="text-yp-gray text-sm">–ó–∞–∫–∞–∑–æ–≤</div>
                    </div>
                    <div className="bg-green-500/10 p-4 rounded-lg text-center">
                      <Icon name="TrendingUp" size={24} className="text-green-400 mx-auto mb-2" />
                      <div className="text-2xl font-bold text-green-400">‚ÇΩ127,890</div>
                      <div className="text-yp-gray text-sm">–í—ã—Ä—É—á–∫–∞</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;